{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Galarzaa's Docs","text":"<p>A collection of personal notes, memos and documentation that I use in my personal projects or when setting up my machines.</p>"},{"location":"badges/","title":"Badges","text":"<p>Just a collection of badges displaying status and stats from my personal projects, all in one place.</p>"},{"location":"badges/#github-galarzaa90","title":"GitHub: Galarzaa90","text":""},{"location":"badges/#tibiapy","title":"tibia.py","text":"<p>GitHub </p> <p>PyPi </p> <p>SonarCloud </p> <p>Docker </p>"},{"location":"badges/#tibiawiki-sql","title":"tibiawiki-sql","text":"<p>GitHub </p> <p>PyPi </p> <p>Docker </p>"},{"location":"badges/#tibiakt","title":"TibiaKT","text":"<p>GitHub </p> <p>Maven </p> <p>SonarCloud </p> <p>Docker </p>"},{"location":"badges/#star-history","title":"Star History","text":""},{"location":"setup/","title":"System Setup","text":"<p>A checklist of the apps I install or configurations I change when I set up a new Windows system.</p>"},{"location":"setup/#software","title":"Software","text":""},{"location":"setup/#general-use","title":"General Use","text":"<ul> <li> Google Chrome</li> <li> Microsoft 365</li> <li> Foxit PDF Reader</li> <li> ChatGPT</li> <li> Microsoft PowerToys</li> <li> WhatsApp</li> <li> Everything</li> <li> Notion</li> <li> Paint.net</li> </ul>"},{"location":"setup/#development","title":"Development","text":"<ul> <li> git</li> <li> Visual Studio Code</li> <li> JetBrains ToolBox<ul> <li> PyCharm</li> <li> IntelliJ IDEA</li> </ul> </li> <li> Python</li> <li> Docker Desktop</li> <li> Node.js</li> <li> Build Tools for Visual Studio</li> <li> pgAdmin</li> <li> DB Browser for SQLite</li> <li> MongoDB Compass</li> <li> Redis Insight</li> <li> Postman</li> </ul>"},{"location":"setup/#entertainment","title":"Entertainment","text":"<ul> <li> NVIDIA App</li> <li> Steam</li> <li> Epic Games</li> <li> Discord</li> <li> Logitech G HUB</li> <li> Plex Server</li> <li> VLC</li> <li> Spotify</li> </ul>"},{"location":"setup/#other","title":"Other","text":"<ul> <li> Run Win11Debloat</li> <li> Install FireCode fonts</li> <li>Set up <code>activenv</code> shortcut</li> </ul>"},{"location":"uses/","title":"Uses","text":""},{"location":"uses/#hardware","title":"Hardware","text":""},{"location":"uses/#personal-computer","title":"Personal Computer","text":"<ul> <li>Motherboard: MSI B450 Tomahawk Max II</li> <li>CPU: Ryzen 5 5600X</li> <li>GPU: MSI GeForce RTX 4070 12GB DDR5</li> <li>RAM: 2x16 GB DDR4 3200 MHz</li> <li>Storage:<ul> <li>ADATA Legend 960 NVMe 1TB SSD</li> <li>Western Digital 1TB HDD</li> <li>Seagate 2TB HDD</li> </ul> </li> <li>Mouse: Logitech G600</li> <li>Keyboard: HyperX Alloy Core</li> <li>Speakers: Logitech Z313</li> <li>Headphones: Logitech G733</li> <li>Displays:<ul> <li>LG 29WQ600 29\" 2560x1080 100Hz</li> <li>Dell P2419H 24\" 1920x1080 60Hz</li> </ul> </li> <li>OS: Windows 11</li> </ul>"},{"location":"uses/#software","title":"Software","text":""},{"location":"uses/#pycharm-professional","title":"PyCharm Professional","text":"<p>Favorite plugins:</p> <ul> <li>.ignore</li> <li>Color Highlighter</li> <li>Grep console</li> <li>GitToolBox</li> <li>Rainbow Brackets</li> <li>SonarLint</li> <li>Sourcery</li> <li>WakaTime</li> </ul>"},{"location":"uses/#intelij-idea-ultimate","title":"InteliJ IDEA Ultimate","text":"<p>Favorite plugins:</p> <ul> <li>.ignore</li> <li>Color Highlighter</li> <li>Grep console</li> <li>GitToolBox</li> <li>Kotest</li> <li>Rainbow Brackets</li> <li>SonarLint</li> <li>WakaTime</li> </ul>"},{"location":"uses/#vscode","title":"VSCode","text":"<p>Favorite extenions:</p> <ul> <li>Color Highlight</li> <li>GistPad</li> <li>gitignore</li> <li>GitLens</li> <li>Markdown All in One</li> <li>NGINX Configuration</li> <li>WakaTime</li> </ul>"},{"location":"blog/","title":"Posts","text":""},{"location":"blog/2025/07/29/blog-init/","title":"blog init","text":"<p>Hello! I have been considering writing a blog for a long time, but I always end up talking myself out of it.</p> <ul> <li>\"No one will even read it.\"</li> <li>\"What are you even going to write about on it?\"</li> <li>\"Who even reads blogs anymore?\"</li> </ul> <p>Well, I believe the first step is the hardest one, so here it is!</p>"},{"location":"blog/2025/07/29/blog-init/#what-to-expect","title":"What to expect?","text":"<p>This blog is part of my personal documentation site, where I collect notes, bookmarks, tech setups, and other scattered things I find useful or interesting.</p> <p>In the same spirit, the blog will be a place to capture ideas that don\u2019t quite fit elsewhere. Less structured, more personal.</p> <p>Topics will probably include software development, gaming, electronics, and whatever else I feel like sharing.</p>"},{"location":"blog/2025/07/29/blog-init/#why-a-blog","title":"Why a blog?","text":"<p>I\u2019ve been keeping personal docs for a while, mostly to save things like command-line snippets, setup instructions, and notes I'd rather not lose.</p> <p>But sometimes an idea is too big for a checklist and too small for a full repo. I wanted a space that sits in between, something more flexible, where I can write without needing a clear structure or purpose.</p> <p>That\u2019s where this blog fits.</p>"},{"location":"dev/","title":"Development","text":"<p>Notes about development.</p>"},{"location":"dev/bookmarks/","title":"Bookmarks","text":"<p>A collection of sites featuring utilities or documentations I use and want to store.</p> <ul> <li> <p>json2pyi</p> <p>Generate Python type definitions from a JSON sample (both Pydantic BaseModel and TypedDict are supported).</p> <p> </p> <p> </p> </li> <li> <p>tree</p> <p>An online tree-like utility for generating ASCII folder structure diagrams. Written in TypeScript and React.</p> <p> </p> <p> </p> </li> <li> <p>crontab guru</p> <p>The quick and simple editor for cron schedule expressions by Cronitor.</p> <p> </p> </li> <li> <p>Discord Snowflake to Timestamp Converted</p> <p>Get the timestamp from a Discord snowflake \u2744</p> <p> </p> <p> </p> </li> <li> <p>Discord Timestamp Generator</p> <p>Get the timestamp from a Discord snowflake \u2744</p> <p> </p> <p> </p> </li> </ul>"},{"location":"dev/extensions/","title":"Editor Extensions &amp; Plugins","text":"<p>A compilation of the extensions and plugins I use in my IDEs.</p>"},{"location":"dev/extensions/#intellij-idea-pycharm","title":"IntelliJ IDEA  &amp; PyCharm","text":"Plugin Description Rainbow Brackets Gives different colors to open and closing brackets to easily find them. .ignore Provides syntax highlighting, templates and rule generation for different ignore files (e.g. <code>.gitignore</code>, <code>.dockerignore</code>) Grep Console Grep, tail, filter, highlighting for the integrated console. GitToolBox Extends git integration with additional features. GitHub Actions Manager Adds a tool window to view GitHub Actions workflow runs. WakaTime Metrics, insights, and time tracking automatically generated from your programming activity. See WakaTime. Code::Stats Yet another plugin for coding stats. I like stats. See Code::Stats Ruff Inspection and highlighting, <code>Reformat Code</code> integration and quick fixes. Pydantic Signature inspection and autocompletion for <code>pydantic.BaseModel</code> subclasses. Color Highlighter Highlights color hex codes and int values in the editor."},{"location":"dev/extensions/#visual-studio-code","title":"Visual Studio Code","text":"Extension Description WakaTime Metrics, insights, and time tracking automatically generated from your programming activity. See WakaTime. Caddyfile Support Syntax highlighting for Caddyfile. Code::Stats Yet another plugin for coding stats. I like stats. See Code::Stats Color Highlight Highlights web colors in editor. Container Tools Makes it easy to create, manage, and debug containerized applications. Docker DX Provides editor warnings, code completion for Dockerfiles and compose files. DotENV Support for dotenv file syntax. Even Better TOML Fully-featured TOML support GitHub Actions Shows workflows runs, syntax hightlighting for flow files. gitignore Syntax hightlighting for .gitignore and templates. GitLab Workflow Integrates GitLab into VS Code. GitLens \u2014 Git supercharged Supercharge Git within VS Code. HOCON Support for HOCON config language. Markdown All in One Markdown support, shortcuts, previews, etc. Markdown Preview Mermaid Support Adds Mermaid diagram and flowchart support to VS Code's builtin markdown preview NGINX Configuration Adds Syntax hightlighting for NGINX configuration files. Open Browser Preview Preview files in your default browser. <p>\ud83d\udea7 \ud83d\udea7 \ud83d\udea7 </p>"},{"location":"dev/misc/","title":"DevOps","text":""},{"location":"dev/misc/#git-configuration-per-directory","title":"git configuration per directory","text":"<p>If you are handling multiple git repositories in the same machine, but you require separate credentials (e.g personal, work), you can define settings that are applied only to repositories in a subdirectory.</p> <p>In <code>.gitconfig</code>, add the <code>[includeIf]</code> block as shown below:</p> <pre><code>[user]\n    name = Galarzaa\n    email = allan@personal.com\n\n[includeIf \"gitdir:~/Galarza/git/work/\"]\n  path = .gitconfig-work\n</code></pre> <p>Create a new file, with the same name as in the path specified above:</p> <pre><code>[user]\n    email = allan@company.com\n</code></pre> <p>Now, whenever you create a commit in a repository inside the specified folder, your work email will be used (unless it has been overriden for the specific repository).</p>"},{"location":"dev/terminal/","title":"Terminal","text":""},{"location":"dev/terminal/#style-terminal","title":"Style Terminal","text":"<p>Colors the command line to make the start of one command easier to find.</p> <p>Add this to <code>.bashrc</code>:</p> <pre><code>export PS1=\"[\\[$(tput sgr0)\\]\\[\\033[38;5;9m\\]\\t\\[$(tput sgr0)\\]\\[\\033[38;5;15m\\]] \\[$(tput sgr0)\\]\\[\\033[38;5;10m\\]\\u@\\[$(tput sgr0)\\]\\[\\033[38;5;34m\\]\\h\\[$(tput sgr0)\\]\\[\\033[38;5;15m\\]:\\[$(tput sgr0)\\]\\[\\033[38;5;39m\\]\\w\\[$(tput sgr0)\\]\\[\\033[38;5;15m\\] \\[$(tput sgr0)\\]\\[\\033[38;5;13m\\]\\\\$\\[$(tput sgr0)\\]\"\n</code></pre> <p>Make sure that this line is uncommented:</p> <pre><code>force_color_prompt=yes\n</code></pre> <p>Preview</p> <p></p>"},{"location":"dev/terminal/#show-current-git-branch","title":"Show current git branch","text":"<p>Add this to <code>.bashrc</code>:</p> <pre><code>git_branch() {\n  git branch 2&gt; /dev/null | sed -e '/^[^*]/d' -e 's/* \\(.*\\)/(\\1)/'\n}\n\nexport PS1=$PS1\"\\$(git_branch)\"\n</code></pre> <p>Preview</p> <p></p> <p>Any other customizations will be preserved.</p>"},{"location":"dev/terminal/#useful-aliases","title":"Useful aliases","text":"<p>Activate the venv in the current directory.</p> <pre><code>alias activenv=\"source venv/bin/activate\"\n</code></pre>"},{"location":"dev/terminal/#favorite-tools","title":"Favorite Tools","text":"Tool Description Installation bat A <code>cat</code> clone with syntax highlighting and Git integration. <code>apt install</code>"},{"location":"dev/windows/","title":"Windows","text":""},{"location":"dev/windows/#registry-edits","title":"Registry Edits","text":""},{"location":"dev/windows/#enabledisable-bing-search-on-start-menu","title":"Enable/disable Bing search on Start Menu","text":"DisableEnable <pre><code>Windows Registry Editor Version 5.00\n\n[HKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\Windows\\Explorer]\n\"DisableSearchBoxSuggestions\"=dword:00000000\n</code></pre> <pre><code>Windows Registry Editor Version 5.00\n\n[HKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\Windows\\Explorer]\n\"DisableSearchBoxSuggestions\"=dword:00000001\n</code></pre>"},{"location":"dev/windows/#powershell-shortcut-to-activate-venv-python","title":"Powershell shortcut to activate venv (Python)","text":"<p>Create an alias called <code>activenv</code> that runs the activate script relative to the current location:</p> <pre><code>New-Alias -Name activenv -Value .venv/scripts/activate.ps1\n</code></pre> <p>Export the alias to a script.</p> <pre><code>Export-Alias -Name activenv -Path \"activenv.ps1\" -As Script\n</code></pre> <p>Add script to startup:</p> <pre><code>Add-Content -Path $Profile -Value (Get-Content activenv.ps1)\n</code></pre>"},{"location":"dev/python/","title":"Python","text":""},{"location":"dev/python/#upgrade-table","title":"Upgrade Table","text":"<p>A quick lookup table listing the main features (or at least the features that interest me) of each Python version.</p> <ul> <li> <p>Python 3.13 (2024-10-07)</p> <ul> <li><code>@warnings.deprecated</code> decorator.</li> <li><code>typing.TypeIs</code> for type narrowing.</li> </ul> </li> <li> <p>Python 3.12 (2023-10-02)</p> <ul> <li><code>TypedDict</code> to annotate <code>**kwargs</code></li> <li><code>@typing.override()</code> decorator.</li> <li>Type Parameter Syntax</li> <li>Improved f-strings syntax support.</li> </ul> </li> <li> <p>Python 3.11 (2022-10-24)</p> <ul> <li><code>Required</code> and <code>NotReuired</code> for <code>TypedDict</code>.</li> <li><code>Self</code> type.</li> </ul> </li> <li> <p>Python 3.10 (2021-10-04)</p> <ul> <li>Structural Pattern Matching, aka <code>match ... case</code>.</li> <li>Union types as <code>X | Y</code> (instead of <code>Union[X, Y]</code>).</li> </ul> </li> </ul>"},{"location":"dev/python/ruff/","title":"Ruff","text":"<p>I use Ruff in most of my Python projects to keep consistent formatting and detect possible bugs. I usually have to go and copy my ruff config from another project and adjust it.</p> <pre><code>[tool.ruff.lint]\nselect = [\n    \"E\", \"W293\", # pycodestyle\n    \"F\", # Pyflakes\n    \"N\", # pep8-naming\n    \"D\", # pydocstyle\n    \"UP\", # pyupgrade\n    \"S\", # flake8-bandit\n    \"B\", # flake8-bugbear\n    \"COM\", # flake8-commas\n    \"C4\", # flake8-comprehensions\n    \"FA\", # flake8-future-annotations\n    \"ISC\", # flake8-implicit-str-concat\n    \"G\", # flake8-logging-format\n    \"PIE\", # flake8-pie\n    \"Q\", # flake8-quotes\n    \"RET\", # flake8-return\n    \"SIM\", # flake8-simplify\n    \"ARG\", # flake8-unused-arguments\n    \"PERF\", # Perflint\n    \"RUF\", # Ruff-specific rules\n    \"ANN\", # flake8-annotations\n    \"DTZ\", # flake8-datetimez\n    \"PL\", # Pylint\n    \"FURB\", # refurb\n]\nignore = [\n    \"D105\", # Missing docstring in magic method\n    \"D107\", # Missing docstring in `__init__`\n    \"RUF012\", # Mutable class attributes should be annotated with `typing.ClassVar`\n    \"RUF013\", # PEP 484 prohibits implicit `Optional`\n    \"ANN101\", # Missing type annotation for {name} in method\n    \"ANN102\", # Missing type annotation for {name} in classmethod\n    \"ANN202\", # Missing return type annotation for private function {name}\n    \"ANN204\", # Missing return type annotation for special method {name}\n    \"ANN401\", # Dynamically typed expressions ({name}) are disallowed in `other`\n    \"PLR0913\", # Too many arguments in function definition\n    \"PLR2004\", #  Magic value used in comparison, consider replacing `{number}` with a constant variable\n    \"PLW2901\", #  Outer {outer_kind} variable {name} overwritten by inner {inner_kind} target\n]\n\n\n[tool.ruff.lint.pycodestyle]\nmax-line-length = 120\n\n[tool.ruff.lint.pep8-naming]\nextend-ignore-names = [\"assert*\"]\n\n[tool.ruff.lint.pyupgrade]\n# Preserve types, even if a file imports `from __future__ import annotations`.\nkeep-runtime-typing = true\n\n[tool.ruff.lint.flake8-bugbear]\n# Allow default arguments like, e.g., `data: List[str] = fastapi.Query(None)`.\nextend-immutable-calls = [\"fastapi.Depends\", \"fastapi.Query\", \"fastapi.Path\"]\n\n[tool.ruff.lint.flake8-type-checking]\nruntime-evaluated-base-classes = [\"pydantic.BaseModel\"]\n</code></pre>"},{"location":"projects/monitoring/","title":"Home PC Monitoring","text":"<p>This is a simple project that that uploads metriics from my PC and Rasberry PI to my Grafana account.</p>"},{"location":"projects/monitoring/#rasberry-pi-host","title":"Rasberry Pi Host","text":"<p>This will be the device that will collect the metrics of other devices in the network to upload them to Grafana.com.</p> <p>I use the following <code>docker-compose.yml</code> file:</p> <pre><code>version: \"3.8\"\n\nservices:\n  grafana-agent:\n    image: grafana/agent:v0.32.0\n    volumes:\n      - /tmp/agent:/etc/agent\n      - ./agent.yaml:/etc/agent-config/agent.yaml\n      - /var/log/:/var/log/\n    command: -config.file=/etc/agent-config/agent.yaml -config.expand-env\n    env_file:\n      - ./auth.env\n    restart: always\n\n  rpi-exporter:\n    image: carlosedp/arm_exporter\n    restart: always\n</code></pre> <p>Note</p> <p>At the moment of writing this, <code>0.32.0</code> was the latest Docker image version that was compatible with <code>armv7</code>.</p> <p>On that same directory, we need a <code>auth.env</code> file with the following:</p> <pre><code>PROMETHEUS_USER=12345678\nAPI_KEY=dGhpcyBpcyBub3QgYW4gYWN0dWFsIEFQSSBrZXk=\n</code></pre> <p>These values are all obtained from your account in Grafana.com.</p> <p>Additionally, we have the configuration file for the agent:</p> <pre><code>integrations:\n  node_exporter:\n    enabled: false\n  prometheus_remote_write:\n    - basic_auth:\n        password: ${API_KEY}\n        username: ${PROMETHEUS_USER}\n      url: https://prometheus-us-central1.grafana.net/api/prom/push\n\n\nmetrics:\n  configs:\n    - name: integrations\n      remote_write:\n        - basic_auth:\n            password: ${API_KEY}\n            username: ${PROMETHEUS_USER}\n          url: https://prometheus-us-central1.grafana.net/api/prom/push\n      scrape_configs:\n        - job_name: rpi-exporter\n          static_configs:\n            - targets:\n              - rpi-exporter:9243\n        - job_name: &lt;job-name-for-pc-job&gt;\n          static_configs:\n            - targets:\n              - 192.168.1.1:4445 # OhmGraphite\n              - 192.168.1.1:9182 # windows_exporter\n</code></pre>"},{"location":"projects/monitoring/#windows-devices","title":"Windows Devices","text":"<p>On Windows devices, I use two tools:</p>"},{"location":"projects/monitoring/#ohmgraphite","title":"OhmGraphite","text":"<p>This collects hardware sensor data, such as CPU and GPU temperatures. I use it in Prometheus mode</p>"},{"location":"projects/monitoring/#windows_exporter","title":"windows_exporter","text":"<p>Collects general information from Windows machine, similar to node_exporter.</p>"},{"location":"projects/monitoring/#raspberry-pi-devices","title":"Raspberry Pi Devices","text":"<p>Configuration for additional Raspberry PI devices coming soon.</p>"},{"location":"projects/monitoring/#grafana-dashboards","title":"Grafana Dashboards","text":""},{"location":"blog/archive/2025/","title":"2025","text":""},{"location":"blog/category/meta/","title":"Meta","text":""}]}